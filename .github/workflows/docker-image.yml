name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    
permissions:
  contents: write

jobs:

  build-and-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/hlopez:latest .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ secrets.DOCKER_USERNAME }}/hlopez:latest'
        format: 'table'
        exit-code: '1'
        severity: 'CRITICAL,HIGH'

    - name: Push image to Docker Hub
      if: success()  # solo si pasó el escaneo
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/hlopez:latest

  build-and-test:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongo --eval 'db.runCommand({ ping: 1 })'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      MONGO_URI: mongodb://localhost:27017

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Instalar dependencias
        run: go mod tidy

      - name: Ejecutar pruebas unitarias
        run: |
          echo "Ejecutando pruebas..."
          go test -run ^Test -short ./controllers/

      - name: Construir imagen Docker
        run: docker build -t go-mongo-app .

      - name: Levantar contenedores para pruebas externas
        run: docker compose up -d || true

      - name: Ejecutar pruebas de integración externas
        run: |
          echo "Ejecutando pruebas de integración externas..."
          go test ./... -v || true

      - name: Apagar contenedores
        if: always()
        run: docker compose down || true

  release:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Generate new release tag
        id: tag
        run: |
          # Obtener el último tag del repositorio remoto
          git fetch --tags
          LAST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.00.0")
          echo "Último tag remoto: $LAST_TAG"

          # Extraer número final y generar nuevo
          LAST_NUMBER=${LAST_TAG##*.}
          NEXT_NUMBER=$((LAST_NUMBER + 1))
          VERSION="v1.00.${NEXT_NUMBER}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

          # Verificar si el tag ya existe remotamente
          if git ls-remote --tags origin | grep -q "refs/tags/$VERSION$"; then
            echo "El tag $VERSION ya existe remotamente. Saltando push..."
            echo "SKIP_PUSH=true" >> $GITHUB_ENV
          else
            git tag $VERSION
            git push origin $VERSION
          fi


      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build Docker image for GitHub Packages
        run: |
          docker build -t ghcr.io/hamiltonlopez/go-mongo-app:latest .

      - name: Push Docker image to GitHub Packages
        run: |
          docker push ghcr.io/hamiltonlopez/go-mongo-app:latest
